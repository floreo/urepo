#!/bin/bash

# exit on errors immediately, do not tolerate unbound variables
set -u -e

# merge stderr with stdout
exec 2>&1

# start of http response
echo "Content-Type: text/plain"
echo

CONFIG=/etc/urepo/urepo.conf

. $CONFIG || {
    echo "Error: failed to load $CONFIG"
    exit
}

cgi_dir=$(cd $(dirname $0) && pwd)

. $cgi_dir/urepo-functions

cd $UREPO_UPLOAD_DIR

# if upload dir contains files not processed for 1 hour - those are deleted
find $UREPO_UPLOAD_DIR -type f -amin +60 -exec rm -f {} \;

method=${REQUEST_METHOD,,}
# post-file-extract saves uploaded file to current dir, remaining post request goes through unchanged
# awk is used to extract parameters from post request in form "declare var=val"
# those declarations are executed in current shell context, since strings are not evaluated this is secure
case "$method" in
    post) cmd="$cgi_dir/extract-post-file" ;;
    delete)
        [ "$HTTP_HOST" != "127.0.0.1" ] && log "Error: delete from $HTTP_HOST is prohibited" && exit
        cmd=cat
        ;;
    *) log "Error: method \"$method\" is not supported" && exit ;;
esac

. <($cmd|awk 'BEGIN {getline RS; RS = RS "?(--)?\r\n";} {gsub(/[\n\r]/, ""); sub(/.* name=\"/, "declare "); sub(/\"Content-Type: .*/, ""); sub(/; [^\"]*\"/, ""); sub(/\"/, "=\""); sub(/$/, "\""); print;}')
[ -z "${file1:-}" ] && log "Error: failed to extract file from post request" && exit
file1_path="$UREPO_UPLOAD_DIR/$file1"

# if we are not oldest script instance running let's wait for earlier instances to complete
while [ "$$" != "$(pgrep -o -f $0)" ] ; do
    sleep 1
done

# let's figure out file extension
ext="${file1##*.}"
# and determine handler for this file
handler="${method}_${ext}"
# if handler exists - let's proceed, otherwise we report error and delete file
if type -t "$handler" | grep -q function; then
    "$handler"
else
    log "Error: no handler found for \"$file1\""
    rm -f "$file1_path"
fi
