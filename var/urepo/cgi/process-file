#!/bin/bash

# exit on errors immediately, do not tolerate unbound variables
set -u -e

# merge stderr with stdout
exec 2>&1

# start of http response
echo "Content-Type: text/plain"
echo

CONFIG=/etc/urepo/urepo.conf

. $CONFIG || {
    echo "Failed to load $CONFIG"
    exit
}

# this script get's data via POST requests, need to know boundary to parse input
boundary=${CONTENT_TYPE##*=}
# let's get all input and strip '\r' symbols
stdin=$(tr -d '\r')
# now we parse POST body, each entry is transformed into string like "var,val"
# where var is field name and val is field value
for i in $(echo $stdin|sed -e "s/--${boundary}-*/\n/g" -e 's/ Content-Disposition: form-data; name="\([^"]*\)" */\1,/g'); do
    # extract variable name ...
    var=$(echo $i|cut -f1 -d,)
    # ... and value ...
    val=$(echo $i|cut -f2 -d,)
    # ... and declare variable, this should be secure since neither var nor val are evaluated
    declare ${var//./_}="$val"
done

# if upload dir contains files not processed for 1 hour - those are deleted
find $UREPO_UPLOAD_DIR -type f -amin +60 -exec rm -f {} \;

# we process files, located only in upload directory
[[ $file1_path =~ ^$UREPO_UPLOAD_DIR ]] || {
    echo "Bad file path: $file1_path"
    exit
}

# if we are not oldest script instance running let's wait for earlier instances to complete
while [ "$$" != "$(pgrep -o -f $0)" ] ; do
    sleep 1
done

# let's figure out file extension
ext=${file1_name##*.}
# and determine handler for this file
handler="$(dirname $0)/handler-${ext}"
# if handler exists - let's proceed, otherwise we report error an delete file
if [ -r "$handler" ] ; then
    . $handler
else
    echo "No handler for $file1_name, removing file"
    rm -f $file1_path
fi

