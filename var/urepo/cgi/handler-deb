cd $DEB_REPO_ROOT

pkg_data=$(dpkg-deb --info $file1_path 2>&1) || {
    echo "$file1_name is not deb package"
    rm -f $file1_path
    exit
}
pkg_name=$(echo "$pkg_data"|grep "^ Package:"|awk '{print $2}')
pkg_version=$(echo "$pkg_data"|grep "^ Version:"|awk '{print $2}')
pkg_arch=$(echo "$pkg_data"|grep "^ Architecture:"|awk '{print $2}')
full_pkg_name=${pkg_name}_${pkg_version}_${pkg_arch}.deb

pool_dir=pool/$dist/$branch
[ -d "$pool_dir" ] || {
    echo "Bad pool directory: $pool_dir"
    exit
}
[ -r "$pool_dir/$full_pkg_name" ] && {
    echo "File $pool_dir/$full_pkg_name already exists, can't overwrite"
    rm -f $file1_path
    exit
}
cp $file1_path $pool_dir/$full_pkg_name
rm -f $file1_path
chmod 0644 $pool_dir/$full_pkg_name
echo "Added $pool_dir/$full_pkg_name"
for arch in $DEB_ARCHITECTURES; do
    data_dir=dists/$dist/$branch/binary-$arch
    [ -d "$data_dir" ] || {
        echo "Bad data directory: $data_dir"
        rm -f $pool_dir/$full_pkg_name
        exit
    }
    if [[ $pkg_arch =~ ($arch|all) ]]; then
        echo "Generating Packages for $data_dir"
        apt-ftparchive -d $data_dir/.cache --arch ${arch} packages $pool_dir > $data_dir/Packages
        gzip -c $data_dir/Packages >$data_dir/Packages.gz
    fi
done
echo "Generating Release for $dist"
apt-ftparchive \
    -o APT::FTPArchive::Release::Suite="$dist" \
    -o APT::FTPArchive::Release::Codename="$dist" \
    -o APT::FTPArchive::Release::Architectures="$DEB_ARCHITECTURES" \
    -o APT::FTPArchive::Release::Components="$DEB_COMPONENTS" \
    release dists/$dist > dists/$dist/Release

